// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file String_PubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "String_PubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

namespace std_msgs
{
    namespace msg
    {
        namespace dds_
        {
            String_PubSubType::String_PubSubType() {
                setName("std_msgs::msg::dds_::String_");
                m_typeSize = (uint32_t)String_::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                m_isGetKeyDefined = String_::isKeyDefined();
                m_keyBuffer = (unsigned char*)malloc(String_::getKeyMaxCdrSerializedSize()>16 ? String_::getKeyMaxCdrSerializedSize() : 16);
            }

            String_PubSubType::~String_PubSubType() {
                if(m_keyBuffer!=nullptr)
                    free(m_keyBuffer);
            }

            bool String_PubSubType::serialize(void *data, SerializedPayload_t *payload) {
                String_ *p_type = (String_*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                // Serialize encapsulation
                ser.serialize_encapsulation();

                try
                {
                    p_type->serialize(ser); // Serialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                return true;
            }

            bool String_PubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                String_* p_type = (String_*) data; 	//Convert DATA to pointer of your type
                eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                        eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                try
                {
                    p_type->deserialize(deser); //Deserialize the object:
                }
                catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                {
                    return false;
                }

                return true;
            }

            std::function<uint32_t()> String_PubSubType::getSerializedSizeProvider(void* data) {
                return [data]() -> uint32_t
                {
                    return (uint32_t)type::getCdrSerializedSize(*static_cast<String_*>(data)) + 4 /*encapsulation*/;
                };
            }

            void* String_PubSubType::createData() {
                return (void*)new String_();
            }

            void String_PubSubType::deleteData(void* data) {
                delete((String_*)data);
            }

            bool String_PubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5) {
                if(!m_isGetKeyDefined)
                    return false;
                String_* p_type = (String_*) data;
                eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,String_::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                p_type->serializeKey(ser);
                if(force_md5 || String_::getKeyMaxCdrSerializedSize()>16)	{
                    m_md5.init();
                    m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                    m_md5.finalize();
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_md5.digest[i];
                    }
                }
                else    {
                    for(uint8_t i = 0;i<16;++i)    	{
                        handle->value[i] = m_keyBuffer[i];
                    }
                }
                return true;
            }


        } //End of namespace dds_

    } //End of namespace msg

} //End of namespace std_msgs
